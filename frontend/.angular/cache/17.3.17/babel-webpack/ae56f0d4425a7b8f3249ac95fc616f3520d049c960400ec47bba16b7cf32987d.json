{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotificationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8083/api/notifications';\n  }\n  getAllNotifications() {\n    return this.http.get(this.apiUrl);\n  }\n  getNotificationById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  getNotificationsByUserId(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}`);\n  }\n  getUnreadNotificationsByUserId(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}/unread`);\n  }\n  getReadNotificationsByUserId(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}/read`);\n  }\n  getUnreadCount(userId) {\n    return this.http.get(`${this.apiUrl}/user/${userId}/count/unread`);\n  }\n  createNotification(notification) {\n    return this.http.post(this.apiUrl, notification);\n  }\n  markAsRead(id) {\n    return this.http.put(`${this.apiUrl}/${id}/read`, {});\n  }\n  markAllAsRead(userId) {\n    return this.http.put(`${this.apiUrl}/user/${userId}/read-all`, {});\n  }\n  deleteNotification(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  deleteAllUserNotifications(userId) {\n    return this.http.delete(`${this.apiUrl}/user/${userId}`);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["NotificationService","constructor","http","apiUrl","getAllNotifications","get","getNotificationById","id","getNotificationsByUserId","userId","getUnreadNotificationsByUserId","getReadNotificationsByUserId","getUnreadCount","createNotification","notification","post","markAsRead","put","markAllAsRead","deleteNotification","delete","deleteAllUserNotifications","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\CIA3_MS\\frontend\\src\\app\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface Notification {\r\n  id?: number;\r\n  userId: number;\r\n  message: string;\r\n  type: string;\r\n  isRead?: boolean;\r\n  createdAt?: string;\r\n  readAt?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private apiUrl = 'http://localhost:8083/api/notifications';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllNotifications(): Observable<Notification[]> {\r\n    return this.http.get<Notification[]>(this.apiUrl);\r\n  }\r\n\r\n  getNotificationById(id: number): Observable<Notification> {\r\n    return this.http.get<Notification>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  getNotificationsByUserId(userId: number): Observable<Notification[]> {\r\n    return this.http.get<Notification[]>(`${this.apiUrl}/user/${userId}`);\r\n  }\r\n\r\n  getUnreadNotificationsByUserId(userId: number): Observable<Notification[]> {\r\n    return this.http.get<Notification[]>(`${this.apiUrl}/user/${userId}/unread`);\r\n  }\r\n\r\n  getReadNotificationsByUserId(userId: number): Observable<Notification[]> {\r\n    return this.http.get<Notification[]>(`${this.apiUrl}/user/${userId}/read`);\r\n  }\r\n\r\n  getUnreadCount(userId: number): Observable<number> {\r\n    return this.http.get<number>(`${this.apiUrl}/user/${userId}/count/unread`);\r\n  }\r\n\r\n  createNotification(notification: Notification): Observable<Notification> {\r\n    return this.http.post<Notification>(this.apiUrl, notification);\r\n  }\r\n\r\n  markAsRead(id: number): Observable<Notification> {\r\n    return this.http.put<Notification>(`${this.apiUrl}/${id}/read`, {});\r\n  }\r\n\r\n  markAllAsRead(userId: number): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/user/${userId}/read-all`, {});\r\n  }\r\n\r\n  deleteNotification(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  deleteAllUserNotifications(userId: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/user/${userId}`);\r\n  }\r\n}\r\n"],"mappings":";;AAiBA,OAAM,MAAOA,mBAAmB;EAG9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,yCAAyC;EAEnB;EAEvCC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAiB,IAAI,CAACF,MAAM,CAAC;EACnD;EAEAG,mBAAmBA,CAACC,EAAU;IAC5B,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAe,GAAG,IAAI,CAACF,MAAM,IAAII,EAAE,EAAE,CAAC;EAC5D;EAEAC,wBAAwBA,CAACC,MAAc;IACrC,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,MAAM,SAASM,MAAM,EAAE,CAAC;EACvE;EAEAC,8BAA8BA,CAACD,MAAc;IAC3C,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,MAAM,SAASM,MAAM,SAAS,CAAC;EAC9E;EAEAE,4BAA4BA,CAACF,MAAc;IACzC,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,MAAM,SAASM,MAAM,OAAO,CAAC;EAC5E;EAEAG,cAAcA,CAACH,MAAc;IAC3B,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,SAASM,MAAM,eAAe,CAAC;EAC5E;EAEAI,kBAAkBA,CAACC,YAA0B;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAe,IAAI,CAACZ,MAAM,EAAEW,YAAY,CAAC;EAChE;EAEAE,UAAUA,CAACT,EAAU;IACnB,OAAO,IAAI,CAACL,IAAI,CAACe,GAAG,CAAe,GAAG,IAAI,CAACd,MAAM,IAAII,EAAE,OAAO,EAAE,EAAE,CAAC;EACrE;EAEAW,aAAaA,CAACT,MAAc;IAC1B,OAAO,IAAI,CAACP,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACd,MAAM,SAASM,MAAM,WAAW,EAAE,EAAE,CAAC;EAC1E;EAEAU,kBAAkBA,CAACZ,EAAU;IAC3B,OAAO,IAAI,CAACL,IAAI,CAACkB,MAAM,CAAO,GAAG,IAAI,CAACjB,MAAM,IAAII,EAAE,EAAE,CAAC;EACvD;EAEAc,0BAA0BA,CAACZ,MAAc;IACvC,OAAO,IAAI,CAACP,IAAI,CAACkB,MAAM,CAAO,GAAG,IAAI,CAACjB,MAAM,SAASM,MAAM,EAAE,CAAC;EAChE;;;uBA/CWT,mBAAmB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAnBzB,mBAAmB;MAAA0B,OAAA,EAAnB1B,mBAAmB,CAAA2B,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}